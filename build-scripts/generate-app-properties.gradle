task generateAppProperties() {
    def dir = "$projectDir/build/resources/main"
    def fileName = "application.properties"
    def properties = [
            "spring.datasource.platform" : "mysql",
            "spring.datasource.url" : "jdbc:mysql://svc-db.default.svc.cluster.local:3306/db_diplomska",
            "spring.datasource.username" : "diplomska-admin",
            "spring.jpa.hibernate.ddl-auto" : "create-drop",
            "spring.jpa.database-platform" : "org.hibernate.dialect.MySQL8Dialect"
    ]
    def dbPasswordKey = "spring.datasource.password"
    def jwtSecretKey = "jwt.token.secret"
    def serverPort = "server.port"
    doLast {
        // create directory if it doesn't exist
        def resDir = file(dir)
        if (!resDir.exists()) {
            println("Creating $dir directory...")
            resDir.mkdirs()
        }
        // prompt the user for dynamic property values
        def dbPasswordValue = userInput("Enter the database password:")
        if (dbPasswordValue.isEmpty()) {
            throw new RuntimeException("The database password cannot be empty.")
        }
        def jwtSecretValue = userInput("Enter the jwtSecret:")
        if (jwtSecretValue.isEmpty()) {
            throw new RuntimeException("The JWT secret cannot be empty.")
        }
        def serverPortValue = userInput("Enter the server port:")
        if (serverPortValue.isEmpty()) {
            throw new RuntimeException("The server port cannot be empty.")
        }
        properties[dbPasswordKey] = dbPasswordValue
        properties[jwtSecretKey] = jwtSecretValue
        properties[serverPort] = serverPortValue
        // generate the application.properties file
        println("Generating application.properties...")
        def propertiesFile = file("$dir/$fileName")
        if (propertiesFile.exists()) {
            propertiesFile.delete()
        }
        def text = ""
        properties.forEach { key, value ->
            text += "$key=$value\n"
        }
        propertiesFile << text
    }
}

static def userInput(String promptLine) {
    println(promptLine)
    def reader = System.in.newReader()
    return reader.readLine()
}

//build.dependsOn generateAppProperties