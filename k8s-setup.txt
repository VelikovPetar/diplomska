Preconditions:
1. Install kubectl (https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux)
2. Install KVM (https://tutorialforlinux.com/2018/08/25/linux-mint-19-kvm-installation-guide/)
3. Install KVM2 driver (https://computingforgeeks.com/how-to-run-minikube-on-kvm/)
4. Install Minikube (https://kubernetes.io/docs/setup/learning-environment/minikube/)

1. Start a local Minikube cluster running in a KVM virtual machine:
    - minikube start --vm-driver=kvm2
    - minikube start --vm-driver=kvm2 --memory=5144 --cpus=4 --extra-config=kubelet.authentication-token-webhook=true

2. Create the 'deployment.yaml' file describing the application (deployment).
3. Run the command to create a deployment from the .yaml file.
    - kubectl apply -f ./deployment.yaml

Metrics server fix

I finally got it working.. Here are the full steps I took to get things working:

Have Kubernetes running within Docker

Delete any previous instance of metrics-server from your Kubernetes instance with

    > kubectl delete -n kube-system deployments.apps metrics-server

Clone metrics-server with git clone https://github.com/kubernetes-incubator/metrics-server.git

Edit the file deploy/1.8+/metrics-server-deployment.yaml to override the default command by adding a command section that didn't exist before. The new section will instruct metrics-server to allow for an insecure communications session (don't verify the certs involved). Do this only for Docker, and not for production deployments of metrics-server:

containers:
- name: metrics-server
    image: k8s.gcr.io/metrics-server-amd64:v0.3.1
    command:
      - /metrics-server
      - --kubelet-insecure-tls
Add metrics-server to your Kubernetes instance with kubectl create -f deploy/1.8+ (if errors with the .yaml, write this instead: kubectl apply -f deploy/1.8+)

Remove and add the autoscaler to your deployment again. It should now show the current cpu usage.